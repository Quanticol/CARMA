grammar eu.quanticol.carma.core.CARMA with org.eclipse.xtext.common.Terminals

generate carma "http://www.quanticol.eu/carma/core/CARMA"


Model:
	(functions=Functions)?
	(records=Records)?
	components=ComponentStyle
;

////////////////////////////////////////////////////PRIMITIVES

PrimitiveTypes returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	CarmaDouble |
	CarmaInteger|
	CarmaBoolean|
	Range	
;

CarmaDouble returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	{CarmaDouble} (negative="-")? left=INT "." right=INT (exponent=CarmaExponent)?
;

CarmaExponent returns CarmaExponent hidden(ML_COMMENT,SL_COMMENT,WS):
	'^' (negative="-")? exponent=INT
;


CarmaInteger returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	{CarmaInteger} (negative="-")? value=INT
;

CarmaBoolean returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	{CarmaBoolean} value=BOOLEANVALUE
;

Range returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	{Range} min=INT ".." max=INT
;

OutcomeProbability returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	{OutcomeProbability} outcome=(CarmaInteger|VariableReference) ":" probability=CarmaDouble
;

Now returns PrimitiveTypes hidden(ML_COMMENT,SL_COMMENT,WS):
	{Now} "now"
;

////////////////////////////////////////////////////RECORDS

Records returns Records hidden(ML_COMMENT,SL_COMMENT,WS): 
	"records""{"
	recordDefinitions+=RecordDefinition
	("," recordDefinitions+=RecordDefinition)*
	"}"
;

RecordDefinition returns RecordDefinition hidden(ML_COMMENT,SL_COMMENT,WS): 
	recordSignature=RecordSignature
	recordDefinitionStatementBlock=RecordDefinitionStatementBlock
;

RecordSignature  returns RecordSignature hidden(ML_COMMENT,SL_COMMENT,WS):
	"record" type=RecordTypeName 
	recordDefinitionParameters=RecordParameters
; 

RecordParameters returns Parameters hidden(ML_COMMENT,SL_COMMENT,WS): 
	{RecordParameters} "("
	(parameters+=AttribParameter
	( "," parameters+=AttribParameter )*)?
	")"
;

RecordDefinitionStatementBlock hidden(ML_COMMENT,SL_COMMENT,WS): 
	"{"
		  feilds+=FeildDeclaration ";"
		  (feilds+=FeildDeclaration ";")*
	"}"
;

RecordArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS): 
	{RecordArguments} "("
	(arguments+=RecordArgument
	( "," arguments+=RecordArgument )*)?
	")"
;

InstantiateRecord hidden(ML_COMMENT,SL_COMMENT,WS): 
	"new" type=RecordType arguments=RecordArguments 
;

////////////////////////////////////////////////////NAMES

VariableName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{VariableName} name=LOWERST
;

FeildName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{FeildName} name=LOWERST
;

ActionName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionName} name=LOWERST  
;

ProcessName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessName} name=UPPERST
;

ComponentName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentName} name=UPPERST
;

FunctionName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionName} name=UPPERST
;

MeasureName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{MeasureName} name=UPPERST
;

SystemName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{SystemName} name=UPPERST
;

RecordTypeName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{RecordTypeName} name=UPPERST
;

////////////////////////////////////////////////////PARAMS

AttribParameter returns Parameter hidden(ML_COMMENT,SL_COMMENT,WS):
	{AttribParameter} type=AttribType	name=VariableName
;

InputParameter returns Parameter hidden(ML_COMMENT,SL_COMMENT,WS):
	{InputParameter} name=VariableName
;

RecordParameter returns Parameter hidden(ML_COMMENT,SL_COMMENT,WS):
	{RecordParameter} type=RecordType name=VariableName
;

DoubleParameter returns Parameter hidden(ML_COMMENT,SL_COMMENT,WS):
	{DoubleParameter} type=DoubleType	name=VariableName
;

IntgerParameter returns Parameter hidden(ML_COMMENT,SL_COMMENT,WS):
	{IntgerParameter} type=IntgerType	name=VariableName
;

StateParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	{StateParameter} parameter=ProcessName
; 

FunctionParameter returns MethodParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		AttribParameter |
		RecordParameter |
		DoubleParameter	|
		IntgerParameter
	)
;

CompParameter returns CompParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		AttribParameter |
		RecordParameter |
		StateParameter
	)
;

////////////////////////////////////////////////////TYPE

Types returns Types hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		type=DoubleType |
		type=IntgerType	|
		type=AttribType	|
		type=RecordType
	)
;

DoubleType returns Type hidden(ML_COMMENT,SL_COMMENT,WS):
	{DoubleType} name="double"
;

IntgerType returns Type hidden(ML_COMMENT,SL_COMMENT,WS):
	{IntgerType} name="int"
;

AttribType returns Type hidden(ML_COMMENT,SL_COMMENT,WS):
	{AttribType} name="attrib"
;

RecordType returns Type hidden(ML_COMMENT,SL_COMMENT,WS):
	{RecordType} name=[RecordTypeName|UPPERST]
;

////////////////////////////////////////////////////ARGUMENTS

PreArgument returns PreArgument hidden(ML_COMMENT,SL_COMMENT,WS):
		value=Expression	
;

CompArgument returns CompArgument hidden(ML_COMMENT,SL_COMMENT,WS):
		value=Expression	
;

FunctionArgument returns MethodArgument hidden(ML_COMMENT,SL_COMMENT,WS):
		value=Expression	
;

OutputActionArgument returns OutputActionArgument hidden(ML_COMMENT,SL_COMMENT,WS):
	value=
		(
			VariableReference 	|	
			CarmaInteger
		)
;

RecordArgument returns RecordArgument hidden(ML_COMMENT,SL_COMMENT,WS): 
	value=
		(
			VariableReference | 
			CarmaInteger
		)
;

////////////////////////////////////////////////////REFERENCE

VariableReference returns VariableReference hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		{VariableReferencePure} 					name=[VariableName|LOWERST] |
		{VariableReferenceMy} 		"my" 		"." name=[VariableName|LOWERST] |
		{VariableReferenceReceiver}	"receiver" 	"." name=[VariableName|LOWERST] |
		{VariableReferenceSender}	"sender" 	"."	name=[VariableName|LOWERST] |
		{VariableReferenceGlobal}	"global"	"." name=[VariableName|LOWERST] |
		{RecordReferencePure} 						name=[VariableName|LOWERST]
		"." record=[FeildName|LOWERST]	|
		{RecordReferenceMy} 		"my" 		"." name=[VariableName|LOWERST]
		"." record=[FeildName|LOWERST]	|
		{RecordReferenceReceiver}	"receiver" 	"." name=[VariableName|LOWERST]
		"." record=[FeildName|LOWERST]	|
		{RecordReferenceSender}		"sender" 	"."	name=[VariableName|LOWERST]
		"." record=[FeildName|LOWERST] |
		{RecordReferenceGlobal}		"global" 	"."	name=[VariableName|LOWERST]
		"." record=[FeildName|LOWERST]
	)
;

////////////////////////////////////////////////////DECLARATION

AttribVariableDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	{AttribVariableDeclaration} type=AttribType	name=VariableName	":="	assign=Expression 
;

FeildDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	{FeildDeclaration} type=AttribType	name=FeildName	":="	assign=Expression
;

MeasureVariableDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	{MeasureVariableDeclaration} type=AttribType	name=VariableName	":="	assign=Expression
;

IntgerVariableDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	{IntgerVariableDeclaration} type=IntgerType	name=VariableName	":="	assign=Expression
;

DoubleVariableDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	{DoubleVariableDeclaration} type=DoubleType	name=VariableName	":="	assign=Expression
;

RecordDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	{RecordDeclaration} type=RecordType name=VariableName ":=" ( 
		instantiate=InstantiateRecord |
		assign=VariableReference
		)
;

FunctionDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		AttribVariableDeclaration |
		IntgerVariableDeclaration |
		DoubleVariableDeclaration |
		RecordDeclaration
	)
;

StoreDeclaration returns Declaration hidden(ML_COMMENT,SL_COMMENT,WS):
	(AttribVariableDeclaration | RecordDeclaration)
;

////////////////////////////////////////////////////ASSIGNMENT

UpdateAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateAssignment} attribute=VariableReference ":=" expression=UpdateExpression
;

FunctionAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionAssignment} attribute=VariableReference ":=" expression=FunctionExpression
;

ComponentAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentAssignment} attribute=VariableReference ":=" expression=ComponentExpression
;

EnvironmentUpdateAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentUpdateAssignment} attribute=VariableReference ":=" expression=EnvironmentUpdateExpression
;

////////////////////////////////////////////////////CALLS

Calls hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		{FunctionReferenceMan}	ref=FunctionCall |
		{FunctionReferencePre}	ref=PreFunctionCall
	)
;

////////////////////////////////////////////////////STATE

State returns State hidden(ML_COMMENT,SL_COMMENT,WS):
	ParallelState
; 
	
ParallelState returns State hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessReference ({ParallelState.left=current}  "|" right=ProcessReference)*
;

ProcessReference returns State hidden(ML_COMMENT,SL_COMMENT,WS):
	 {ProcessReference} expression=[ProcessName|UPPERST]
;

////////////////////////////////////////////////////SET COMPREHENSION

SetComp hidden(ML_COMMENT,SL_COMMENT,WS):
	{SetComp} 
	"#" 
	"{" 
	variable=ComponentComprehension
	"|"
	predicate=BooleanExpression
	"}"
; 

////////////////////////////////////////////////////COMPONENT COMPREHENSION
ComponentComprehension returns ComponentComprehension hidden(ML_COMMENT,SL_COMMENT,WS):
	ParallelComponentComprehension
; 

ParallelComponentComprehension returns ComponentComprehension  hidden(ML_COMMENT,SL_COMMENT,WS):
	AtomicComponentComprehension ({ParallelComponentComprehension.left=current}  "&" right=AtomicComponentComprehension)*
;

AtomicComponentComprehension returns State  hidden(ML_COMMENT,SL_COMMENT,WS):
	 {AllComponents} 		"*" 											|
	 {AComponentAllStates}	comp=[ComponentName|UPPERST] "[" "*" "]"		|
	 {AComponentAState}		comp=[ComponentName|UPPERST] "[" state=State "]"
;

////////////////////////////////////////////////////SPAWN
Spawn hidden(ML_COMMENT,SL_COMMENT,WS):
	{Spawn} Spawn=BlockSpawn
;

BlockSpawn hidden(ML_COMMENT,SL_COMMENT,WS):
	{BlockSpawn} comp+=ComponentBlockSpawn ("," comp+=ComponentBlockSpawn+)*
;

//LineSpawn hidden(ML_COMMENT,SL_COMMENT,WS):
//	{LineSpawn} comp+=ComponentLineDefinitionSpawn ("," comp+=ComponentLineDefinitionSpawn+)*
//;

////////////////////////////////////////////////////FUNCTIONS
Functions hidden(ML_COMMENT,SL_COMMENT,WS):
	functions+=FunctionDefinition+
;

FunctionDefinition hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionDefinition}
	"fun"
	type=Types
	name=FunctionName
	functionParameters=FunctionDefinitionParameters
	functionBody=FunctionBody
;
	
FunctionDefinitionParameters returns Parameters hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionDefinitionParameters}
	"("
	(parameters+=FunctionParameter
	( "," parameters+=FunctionParameter )*)?
	")"
;
	
FunctionBody hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionBody} 
	"{" 
	statements+=FunctionStatement*
	methodReturn=FunctionReturn
	"}"
;
	
FunctionStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		FunctionDeclaration 			|
		FunctionAssignment		 		|
		FunctionIfStatement 			|
		FunctionForStatement
	)
	";"
;


FunctionIfStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	"if" "(" expression=BooleanExpression ")"
	thenBlock=FunctionIfBlock
	(=>"else" elseBlock=FunctionIfBlock)?
;
	

FunctionIfBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	statements += FunctionStatement |
 '{' statements += FunctionStatement+ '}'
;
	

FunctionForStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	"for" "(" variable=AttribVariableDeclaration ";" expression=BooleanExpression ";" afterThought=FunctionAfterThought")" 
	functionForBlock=FunctionForBlock
;
	

FunctionAfterThought hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionAfterThought}
	functionAssignment=FunctionAssignment
;
	
FunctionForBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	statements += FunctionStatement |
 	'{' 
 	statements += FunctionStatement+ 
 	'}'
;	

FunctionCall hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionCall} name=[FunctionName|UPPERST]
	arguments=FunctionCallArguments 
;
	
FunctionCallArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionCallArguments}
	"("
	(arguments+=FunctionArgument
	( "," arguments+=FunctionArgument )*)?
	")"
;	 

FunctionReturn hidden(ML_COMMENT,SL_COMMENT,WS):
	"return" expression=FunctionExpression ";"
;

////////////////////////////////////////////////////PREDEFINED METHODS	
PreFunctionCall returns PreFunctionCall hidden(ML_COMMENT,SL_COMMENT,WS):
	(	
	{PDFunction} 		name="PDF"		| 
	{UniformFunction} 	name="Uniform"	| 
	{CeilingFunction} 	name="Ceiling"	|
	{FloorFunction} 	name="Floor"	|
	{MaxFunction}		name="Max"		|
	{MinFunction}		name="Min"
	)
	functionArguments=PredFunctionCallArguments 
;
	
PredFunctionCallArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{PredFunctionCallArguments} 
	"("
	(arguments+=PreArgument
	( "," arguments+=PreArgument )*)?
	")"
;

////////////////////////////////////////////////////COMPONENT
ComponentStyle returns ComponentStyle hidden(ML_COMMENT,SL_COMMENT,WS):
	(  
	{BlockStyle}
	definitions+=ComponentBlockDefinition+
	(processes=Processes)?
	(measures=MeasureBlock)?
	system=BlockSystem
	)
;
	
ComponentBlockDefinition returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockDefinition}
	componentSignature=ComponentBlockSignature
	componentBlock=ComponentBlock
	
;

ComponentBlockSignature returns ComponentSignature hidden(ML_COMMENT,SL_COMMENT,WS):
	"component"
	name=ComponentName
	componentParameters=ComponentParameters
;
	
ComponentParameters returns Parameters hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentParameters}
	"("
	(parameters+=CompParameter
	( "," parameters+=CompParameter )*)?
	")"
;
	
ComponentBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	"{"
	store=StoreBlock
	processes+=ProcessesBlock
	initBlock=InitBlock
	"}"
;
	
StoreBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{StoreBlock}
	"store" 
	"{" 
	(attributes+=StoreDeclaration ";"
	(attributes+=StoreDeclaration ";" )*)?
	"}"
;
	
ProcessesBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessesBlock}
	"behaviour"
	"{"
	(processes+=Process ";"
	(processes+=Process ";" )*)?
	"}"
;

InitBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{InitBlock}
	"init" 
	"{" 
	init=State
	";"
	"}"
;

BlockSystem returns System:
	{BlockSystem}
	"system" name=SystemName "{"
	collective=BlockCollective
	(environment=Environment)?
	"}"
;

BlockCollective hidden(ML_COMMENT,SL_COMMENT,WS):
	"collective" "{"
	declarations+=ComponentBlockDeclaration+
	"}"
;
	
ComponentBlockDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	(  
		ComponentBlockNew |  
		ComponentBlockForStatement
	)
;
	
ComponentBlockNew returns CBND hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockNew}
	"new"
	name=[ComponentName|UPPERST] 
	arguments=ComponentBlockArguments
//	("["population=INT"]")?
	";"
;

ComponentBlockSpawn returns CBND hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockSpawn}
	"new"
	name=[ComponentName|UPPERST] 
	arguments=ComponentBlockArguments
//	("["population=INT"]")?
;

ComponentBlockArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockArguments}
	"("
	(arguments+=CompArgument
	( "," arguments+=CompArgument )*)?
	")"
;

ComponentBlockForStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	"for" "(" variable=AttribVariableDeclaration ";" expression=BooleanExpression ";" afterThought=ComponentAfterThought")" 
	componentBlockForBlock=ComponentBlockForBlock
;

ComponentBlockForBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	"{"
	component=ComponentBlockNew
	"}" ";"
;

//LineSystem returns System:
//	{LineSystem}
//	"system" name=SystemName "{"
//	collective=LineCollective
//	processes=Processes
//	(environment=Environment)?
//	"}"
//;
//
//LineCollective hidden(ML_COMMENT,SL_COMMENT,WS):
//	"collective" "{"
//	components+=ComponentLine+
//	"}"
//;
//
//
//ComponentLine returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
//	(
//		{ComponentLineForStatement} component=ComponentLineForStatement |
//		{ComponentLineDefinition} component=ComponentLineDefinition
//	)
//;
//	
//ComponentLineForStatement hidden(ML_COMMENT,SL_COMMENT,WS):
//	"for" "(" variable=AttribVariableDeclaration ";" expression=BooleanExpression ";" afterThought=ComponentAfterThought")" 
//	componentBlockForBlock=ComponentLineForBlock
//;
//
//ComponentLineForBlock hidden(ML_COMMENT,SL_COMMENT,WS):
//		"{"
//		component=ComponentLineDefinition
//		"}" ";"
//;
//	
//ComponentLineDefinition returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
//	{ComponentLineDefinition}
//	componentSignature=ComponentLineSignature
//	("["population=INT"]")?
//	";"
//;
//
//ComponentLineSignature returns ComponentSignature hidden(ML_COMMENT,SL_COMMENT,WS):
//	name=ComponentName
//	"("
//	init=State
//	","
//	"{"
//	store=StoreLine
//	"}"
//	")"
//;
//
//ComponentLineDefinitionSpawn returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
//	{ComponentLineDefinitionSpawn}
//	name=ComponentName
//	"("
//	init=State
//	","
//	"{"
//	store=StoreLine
//	"}"
//	")"
//	("["population=INT"]")?
//;
//	
//StoreLine hidden(ML_COMMENT,SL_COMMENT,WS):
//	{StoreLine}
//	(attributes+=StoreDeclaration
//	( "," attributes+=StoreDeclaration )*)?
//;
	
ComponentAfterThought hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentAfterThought}
	componentAssignment=ComponentAssignment
;
////////////////////////////////////////////////////PROCESS
Processes hidden(ML_COMMENT,SL_COMMENT,WS):
	"abstract" "{"
	processes+=Process ";"
	( processes+=Process ";" )*
	"}"
;

Process hidden(ML_COMMENT,SL_COMMENT,WS):
	name=ProcessName
	"="
	processExpression=ProcessExpression 
;

ProcessExpression returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionChoice
;

ProcessExpressionChoice returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionPrimary ({ProcessExpressionChoice.left=current}  "+" right=ProcessExpressionPrimary)*
;

ProcessExpressionPrimary returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	"(" ProcessExpression ")" |
	ProcessExpressionAtomic
;

ProcessExpressionAtomic returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionLeaf					|
	ProcessExpressionGuard 					|
	ProcessExpressionAction 				|
	ProcessExpressionReference 
;

ProcessExpressionGuard returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionGuard} expression=Guard
	reference=ProcessExpressionPrimary
;

ProcessExpressionAction returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionAction} expression=Action
	"."
	reference=ProcessExpressionPrimary
;

ProcessExpressionReference returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionReference} expression=[ProcessName|UPPERST]
;

ProcessExpressionLeaf returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionLeaf} (expression="nil" |	expression="kill")
;

Guard hidden(ML_COMMENT,SL_COMMENT,WS):
	{Guard} "[" booleanExpression=BooleanExpression "]"
;

Action hidden(ML_COMMENT,SL_COMMENT,WS):
	{Action}
	name=ActionName
	(
		action=MultiCast | action=UniCast		
	)
;

MultiCast returns Cast hidden(ML_COMMENT,SL_COMMENT,WS):
	{MultiCast}
	"*" 
	(
		predicate=ActionGuard io=IO | 
		io=IO | 
		spont=SpontaneousAction
	)
;

UniCast returns Cast hidden(ML_COMMENT,SL_COMMENT,WS):
	{UniCast}
	(
		predicate=ActionGuard io=IO |
		io=IO
	)
;

IO hidden(ML_COMMENT,SL_COMMENT,WS):
	( 
		InputAction			|
		OutputAction
	)
;

SpontaneousAction hidden(ML_COMMENT,SL_COMMENT,WS):
	{SpontaneousAction} (update=Update)?
;

InputAction returns IO  hidden(ML_COMMENT,SL_COMMENT,WS):
	{InputAction}  inputActionArguments=InputActionParameters (update=Update)?
;

InputActionParameters returns Parameters hidden(ML_COMMENT,SL_COMMENT,WS):
	{InputActionParameters}
	"(" 
	(parameters+=InputParameter
	( "," parameters+=InputParameter )* )?
	")"
;

OutputAction returns IO hidden(ML_COMMENT,SL_COMMENT,WS):
	{OutputAction} outputActionArguments=OutputActionArguments (update=Update)?
;

OutputActionArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{OutputActionArguments}
	"<"
	(outputArguments+=OutputActionArgument
	( "," outputArguments+=OutputActionArgument )*)?
	">"
;

Update hidden(ML_COMMENT,SL_COMMENT,WS):
	{Update} "{" (updateAssignment+=UpdateAssignment ( "," updateAssignment+=UpdateAssignment)*)? "}"
;


ActionGuard hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionGuard} "[" booleanExpression=BooleanExpression "]"
;
////////////////////////////////////////////////////EXPRESSIONS
BooleanExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{BooleanExpression} expression=Expression
;

UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateExpression} expression=Expression
;

FunctionExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{FunctionExpression} expression=Expression
;

EnvironmentProbExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentProbExpression} expression=Expression
;

EnvironmentRateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentRateExpression} expression=Expression
;

EnvironmentUpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentUpdateExpression} expression=Expression
;

ComponentExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentExpression} expression=Expression
;

Expression returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Or
;

Or returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	And ({Or.left=current} "||" 
		right=And
	)*
;

And returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Equality ({And.left=current} "&&" 
		right=Equality
	)*
;
	
Equality returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Comparison (
		{Equality.left=current} op=("=="|"!=")
		right=Comparison
	)*
;

Comparison returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Subtraction ({Comparison.left=current} op=(">="|"<="|">"|"<") 
		right=Subtraction
	)*
;

Subtraction returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Addition ({Subtraction.left=current} '-' 
		right=Addition
	)*
;

Addition returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Multiplication ({Addition.left=current} '+' 
		right=Multiplication
	)*
;

Multiplication returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Modulo ({Multiplication.left=current} '*' 
		right=Modulo
	)*
;

Modulo returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS): 
	Division ({Modulo.left=current} '%' 
		right=Division
	)*
;

Division returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS): 
	Primary ({Division.left=current} '/' 
		right=Primary
	)*
;

Primary returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' Expression ')' | 
	{Not} "!" expression=Primary |
	Atomic
;

Atomic returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	{AtomicPrimitive}			value=PrimitiveTypes 		|
	{AtomicVariable}			value=VariableReference 	|
	{AtomicMethodReference}		value=Calls					|
	{AtomicNow}					value=Now					|
	{AtomicMeasure}				value=SetComp				|
	{AtomicState}				value=State					|
	{AtomicRecord}				value=InstantiateRecord		|
	{AtomicOutcome}				value=OutcomeProbability
;
////////////////////////////////////////////////////MEASURES

MeasureBlock returns MeasureBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	"measures" "{"
	measures+=Measure ";"
	(measures+=Measure+ ";")*
	"}"
;

Measure returns Measure hidden(ML_COMMENT,SL_COMMENT,WS):
	"measure" name=MeasureName ranges=MeasureVariableDeclarations "="  measure=SetComp 
;

MeasureVariableDeclarations hidden(ML_COMMENT,SL_COMMENT,WS):
	"["
	variables+=MeasureVariableDeclaration
	("," variables+=MeasureVariableDeclaration+)*
	"]"
;
	
////////////////////////////////////////////////////ENVIRONMENT	
Environment hidden(ML_COMMENT,SL_COMMENT,WS):
	{Environment}
	"environment" 
	"{"
	(stores=GlobalStoreBlock)?
	(probabilityBlock=ProbabilityBlock)?
	(rateBlock=RateBlock)?
	(updateBlock=UpdateBlock)?
	"}"
;

GlobalStoreBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{GlobalStoreBlock}
	"store" 
	"{" 
	(attributes+=StoreDeclaration ";"
	( attributes+=StoreDeclaration ";" )*)?
	"}"
;
	
ProbabilityBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProbabilityBlock}
	"prob" 
	"{"
		(probabilities+=Probability+ ";")*
		("default" ":" value=CarmaDouble ";")?
	"}"
;
	
Probability returns EvolutionRule hidden(ML_COMMENT,SL_COMMENT,WS):
	{Probability}
	guard=EnvironmentGuard stub=ActionStub ":" expression=EnvironmentProbExpression
;

RateBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{RateBlock}
	"rate"
	"{"
		(rates+=Rate+ ";")*
		("default" ":" value=CarmaDouble ";")?
	"}"
;

Rate returns EvolutionRule hidden(ML_COMMENT,SL_COMMENT,WS):
	{Rate}
	guard=EnvironmentGuard stub=ActionStub ":" expression=EnvironmentRateExpression
;
	
UpdateBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateBlock}
	"update"
	"{"
		(updates+=EnvironmentUpdate+ ";")*
	"}"
;

EnvironmentUpdate returns EvolutionRule hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentUpdate}
	guard=EnvironmentGuard stub=ActionStub ":" 
	((expression+=EnvironmentUpdateAssignment ("," expression+=EnvironmentUpdateAssignment+)*)? 
	("," spawn=Spawn)? | spawn=Spawn)
;

EnvironmentGuard hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentGuard} "[" booleanExpression=BooleanExpression "]"
;

ActionStub hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionStub} name=[ActionName|LOWERST] (type=BroadCast)?
;

BroadCast:
	"*"
;


terminal BOOLEANVALUE: 		('true' | 'false');
terminal LOWERST: 			("a".."z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal UPPERST: 			("A".."Z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;