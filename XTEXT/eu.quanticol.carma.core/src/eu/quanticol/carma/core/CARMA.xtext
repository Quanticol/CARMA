grammar eu.quanticol.carma.core.CARMA with org.eclipse.xtext.common.Terminals

generate carma "http://www.quanticol.eu/carma/core/CARMA"


Model:
	(methods=Methods)?
	(records=Records)?
	components=ComponentStyle
;

////////////////////////////////////////////////////PRIMITIVES

PrimitiveType returns PrimitiveType hidden(ML_COMMENT,SL_COMMENT,WS):
	CarmaDouble |
	CarmaInteger|
	CarmaBoolean|
	Range	
;

CarmaDouble returns PrimitiveType hidden(ML_COMMENT,SL_COMMENT,WS):
	{CarmaDouble} (negative="-")? left=INT "." right=INT (exponent=CarmaExponent)?
;

CarmaExponent returns CarmaExponent hidden(ML_COMMENT,SL_COMMENT,WS):
	'^' (negative="-")? exponent=INT
;


CarmaInteger returns PrimitiveType hidden(ML_COMMENT,SL_COMMENT,WS):
	{CarmaInteger} (negative="-")? value=INT
;

CarmaBoolean returns PrimitiveType hidden(ML_COMMENT,SL_COMMENT,WS):
	{CarmaBoolean} value=BOOLEANVALUE
;

Range returns PrimitiveType hidden(ML_COMMENT,SL_COMMENT,WS):
	{Range} min=INT ".." max=INT
;

OutcomeProbability returns PrimitiveType hidden(ML_COMMENT,SL_COMMENT,WS):
	{OutcomeProbability} outcome=(CarmaInteger|VariableReference) ":" probability=CarmaDouble
;

////////////////////////////////////////////////////RECORDS

Records returns Records hidden(ML_COMMENT,SL_COMMENT,WS): 
	"records""{"
	recordDefinitions+=RecordDefinition
	("," recordDefinitions+=RecordDefinition)*
	"}"
;

RecordDefinition returns RecordDefinition hidden(ML_COMMENT,SL_COMMENT,WS): 
	recordSignature=RecordSignature
	recordDefinitionStatementBlock=RecordDefinitionStatementBlock
;

RecordSignature  returns RecordSignature hidden(ML_COMMENT,SL_COMMENT,WS):
	"record" class=RecordClassName 
	recordDefinitionArguments=RecordParameters
; 

RecordParameters hidden(ML_COMMENT,SL_COMMENT,WS): 
	{RecordParameters} "("
	(parameters+=AttribParameter
	( "," parameters+=AttribParameter )*)?
	")"
;

RecordDefinitionStatementBlock hidden(ML_COMMENT,SL_COMMENT,WS): 
	"{"
		  attributes+=RecordAttribVariableDeclaration ";"
		  (attributes+=RecordAttribVariableDeclaration ";")*
	"}"
;

RecordArguments hidden(ML_COMMENT,SL_COMMENT,WS): 
	{RecordArguments} "("
	(arguments+=RecordArgument
	( "," arguments+=RecordArgument )*)?
	")"
;

RecordArgument hidden(ML_COMMENT,SL_COMMENT,WS): 
	{RecordArgument} argument=(VariableReference | CarmaInteger)
;

InstantiateRecord hidden(ML_COMMENT,SL_COMMENT,WS): 
	"new" instantiate=[RecordClassName|UPPERST] arguments=RecordArguments 
;

////////////////////////////////////////////////////VARIABLES

VariableName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{VariableName} name=LOWERST
;

RecordName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{RecordName} name=LOWERST
;

ActionName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionName} name=LOWERST  
;

ProcessName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessName} name=UPPERST
;

ComponentName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentName} name=UPPERST
;

MethodName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodName} name=UPPERST
;

MeasureName returns Name  hidden(ML_COMMENT,SL_COMMENT,WS):
	{MeasureName} name=UPPERST
;

SystemName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{SystemName} name=UPPERST
;

RecordClassName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{RecordClassName} name=UPPERST
;

InputName returns Name hidden(ML_COMMENT,SL_COMMENT,WS):
	{InputName} name=LOWERST
;

AttribParameter returns AttribParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	type=AttribLabel	name=VariableName
;

RecordParameter returns RecordParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	type=[RecordClassName|UPPERST] name=VariableName
;

DoubleParameter returns DoubleParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	type=DoubleLabel	name=VariableName
;

IntgerParameter returns IntgerParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	type=IntgerLabel	name=VariableName
;

MacroParameter returns MacroParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	assignee=ProcessName
; 


Types returns Types hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		{DoubleTypeLabel} 		type=DoubleLabel 	|
		{IntegerTypeLabel} 		type=IntgerLabel	|
		{AttribTypeLabel}		type=AttribLabel	|
		{RecordTypeLabel}		ref=[RecordClassName|UPPERST]
	)
;

DoubleLabel hidden(ML_COMMENT,SL_COMMENT,WS):
	"double"
;

IntgerLabel hidden(ML_COMMENT,SL_COMMENT,WS):
	"int"
;

AttribLabel hidden(ML_COMMENT,SL_COMMENT,WS):
	"attrib"
;

Parameters returns Parameters hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		AttribParameter |
		RecordParameter |
		DoubleParameter	|
		IntgerParameter
	)
;

PreArguments returns PreArguments hidden(ML_COMMENT,SL_COMMENT,WS):
		value=Expression	
;


CompParameters returns CompParameters hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		AttribParameter |
		RecordParameter |
		MacroParameter
	)
;

CompArguments returns CompArguments hidden(ML_COMMENT,SL_COMMENT,WS):
		value=Expression	
;

Arguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
		value=Expression	
;

VariableReference returns VariableReference hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		{VariableReferencePure} 					name=[VariableName|LOWERST] |
		{VariableReferenceMy} 		"my" 		"." name=[VariableName|LOWERST] |
		{VariableReferenceThis} 	"this" 		"." name=[VariableName|LOWERST] |
		{VariableReferenceReceiver}	"receiver" 	"." name=[VariableName|LOWERST] |
		{VariableReferenceSender}	"sender" 	"."	name=[VariableName|LOWERST] |
		{VariableReferenceGlobal}	"global"	"." name=[VariableName|LOWERST] |
		{RecordReferencePure} 						name=[VariableName|LOWERST]
		"." record=[RecordName|LOWERST]	|
		{RecordReferenceMy} 		"my" 		"." name=[VariableName|LOWERST]
		"." record=[RecordName|LOWERST]	|
		{RecordReferenceThis} 		"this" 		"." name=[VariableName|LOWERST]
		"." record=[RecordName|LOWERST]	|
		{RecordReferenceReceiver}	"receiver" 	"." name=[VariableName|LOWERST]
		"." record=[RecordName|LOWERST]	|
		{RecordReferenceSender}		"sender" 	"."	name=[VariableName|LOWERST]
		"." record=[RecordName|LOWERST] |
		{RecordReferenceGlobal}		"global" 	"."	name=[VariableName|LOWERST]
		"." record=[RecordName|LOWERST]
	)
;


AttribVariableDeclaration returns AttribVariableDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	type=AttribLabel	name=VariableName	":="	assign=Expression 
;

RecordAttribVariableDeclaration returns RecordAttribVariableDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	type=AttribLabel	name=RecordName	":="	assign=Expression
;

MeasureVariableDeclaration returns MeasureVariableDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	type=AttribLabel	name=VariableName	":="	assign=Expression
;

IntgerVariableDeclaration returns IntgerVariableDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	type=IntgerLabel	name=VariableName	":="	assign=Expression
;

DoubleVariableDeclaration returns DoubleVariableDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	type=DoubleLabel	name=VariableName	":="	assign=Expression
;

RecordDeclaration returns RecordDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	type=[RecordClassName|UPPERST] name=VariableName ":=" ( 
		instantiate=InstantiateRecord |
		assign=VariableReference
		)
;

MethodDeclaration returns MethodDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		AttribVariableDeclaration |
		IntgerVariableDeclaration |
		DoubleVariableDeclaration |
		RecordDeclaration
	)
;

StoreDeclaration returns StoreDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	(AttribVariableDeclaration | RecordDeclaration)
;

UpdateAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateAssignment} attribute=VariableReference ":=" expression=UpdateExpression
;

MethodAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodAssignment} attribute=VariableReference ":=" expression=MethodExpression
;

ComponentAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentAssignment} attribute=VariableReference ":=" expression=ComponentExpression
;

EnvironmentUpdateAssignment hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentUpdateAssignment} attribute=VariableReference ":=" expression=EnvironmentUpdateExpression
;

MethodReference returns MethodExpressions hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		{MethodReferenceMan}	ref=MethodCall |
		{MethodReferencePre}	ref=PreMethodCall
	)
;

////////////////////////////////////////////////////MACRO

State returns State hidden(ML_COMMENT,SL_COMMENT,WS):
	ParallelState
; 
	
ParallelState returns State hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessReference ({ParallelState.left=current}  "|" right=ProcessReference)*
;

ProcessReference returns State hidden(ML_COMMENT,SL_COMMENT,WS):
	 {ProcessReference} name=ProcessName
;

////////////////////////////////////////////////////SET COMPREHENSION

SetComp hidden(ML_COMMENT,SL_COMMENT,WS):
	{SetComp} 
	"#" 
	"{" 
	variable=ComponentComprehension
	"|"
	predicate=BooleanExpression
	"}"
; 

////////////////////////////////////////////////////ComponentComprehension
ComponentComprehension returns ComponentComprehension hidden(ML_COMMENT,SL_COMMENT,WS):
	ParallelComponentComprehension
; 

ParallelComponentComprehension returns ComponentComprehension  hidden(ML_COMMENT,SL_COMMENT,WS):
	AtomicComponentComprehension ({ParallelComponentComprehension.left=current}  "&" right=AtomicComponentComprehension)*
;

AtomicComponentComprehension returns State  hidden(ML_COMMENT,SL_COMMENT,WS):
	 {AllComponents} 		"*" 											|
	 {AComponentAllStates}	comp=[ComponentName|UPPERST] "[" "*" "]"		|
	 {AComponentAState}		comp=[ComponentName|UPPERST] "[" state=State "]"
;

////////////////////////////////////////////////////SPAWN
Spawn hidden(ML_COMMENT,SL_COMMENT,WS):
	{Spawn} Spawn=BlockSpawn
;

BlockSpawn hidden(ML_COMMENT,SL_COMMENT,WS):
	{BlockSpawn} comp+=ComponentBlockSpawn ("," comp+=ComponentBlockSpawn+)*
;

//LineSpawn hidden(ML_COMMENT,SL_COMMENT,WS):
//	{LineSpawn} comp+=ComponentLineDefinitionSpawn ("," comp+=ComponentLineDefinitionSpawn+)*
//;

////////////////////////////////////////////////////FUNCTIONS
Methods hidden(ML_COMMENT,SL_COMMENT,WS):
	methods+=MethodDefinition+
;

MethodDefinition hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodDefinition}
	"fun"
	type=Types
	name=MethodName
	methodParameters=MethodDefinitionParameters
	methodBody=MethodBody
;
	
MethodDefinitionParameters hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodDefinitionParameters}
	"("
	(parameters+=MethodDefinitionParameter
	( "," parameters+=MethodDefinitionParameter )*)?
	")"
;

MethodDefinitionParameter hidden(ML_COMMENT,SL_COMMENT,WS):
	parameter=Parameters
;
	
MethodBody hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodBody} 
	"{" 
	statements+=MethodStatement*
	methodReturn=MethodReturn
	"}"
;
	
MethodStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		MethodDeclaration 			|
		MethodAssignment		 	|
		MethodIfStatement 			|
		MethodForStatement
	)
	";"
;


MethodIfStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	"if" "(" expression=BooleanExpression ")"
	thenBlock=MethodIfBlock
	(=>"else" elseBlock=MethodIfBlock)?
;
	

MethodIfBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	statements += MethodStatement |
 '{' statements += MethodStatement+ '}'
;
	

MethodForStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	"for" "(" variable=AttribVariableDeclaration ";" expression=BooleanExpression ";" afterThought=MethodAfterThought")" 
	MethodForBlock=MethodForBlock
;
	

MethodAfterThought hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodAfterThought}
	methodAssignment=MethodAssignment
;
	
MethodForBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	statements += MethodStatement |
 	'{' 
 	statements += MethodStatement+ 
 	'}'
;	

MethodCall hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodCall} name=[MethodName|UPPERST]
	arguments=MethodCallArguments 
;
	
MethodCallArguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodCallArguments}
	"("
	(arguments+=Arguments
	( "," arguments+=Arguments )*)?
	")"
;	 

MethodReturn hidden(ML_COMMENT,SL_COMMENT,WS):
	"return" expression=MethodExpression ";"
;

////////////////////////////////////////////////////PREDEFINED METHODS	
PreMethodCall returns PreMethodCall hidden(ML_COMMENT,SL_COMMENT,WS):
	(	
	{PDFunction} 		name="PDF"		| 
	{UniformFunction} 	name="Uniform"	| 
	{CeilingFunction} 	name="Ceiling"	|
	{FloorFunction} 	name="Floor"	|
	{MaxFunction}		name="Max"		|
	{MinFunction}		name="Min"
	)
	functionArguments=PredMethodCallArguments 
;
	
PredMethodCallArguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{PredMethodCallArguments} 
	"("
	(arguments+=PreArguments
	( "," arguments+=PreArguments )*)?
	")"
;

////////////////////////////////////////////////////COMPONENT
ComponentStyle returns ComponentStyle hidden(ML_COMMENT,SL_COMMENT,WS):
	(  
	{BlockStyle}
	definitions+=ComponentBlockDefinition+
	(processes=Processes)?
	(measures=MeasureBlock)?
	system=BlockSystem
	)
;
	
ComponentBlockDefinition returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockDefinition}
	componentSignature=ComponentBlockSignature
	componentBlock=ComponentBlock
	
;

ComponentBlockSignature returns ComponentSignature hidden(ML_COMMENT,SL_COMMENT,WS):
	"component"
	name=ComponentName
	componentParameters=ComponentParameters
;
	
ComponentParameters hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentParameters}
	"("
	(parameters+=CompParameters
	( "," parameters+=CompParameters )*)?
	")"
;
	
ComponentBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	"{"
	store=StoreBlock
	processes+=ProcessesBlock
	initBlock=InitBlock
	"}"
;
	
StoreBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{StoreBlock}
	"store" 
	"{" 
	(attributes+=StoreDeclaration ";"
	(attributes+=StoreDeclaration ";" )*)?
	"}"
;
	
ProcessesBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessesBlock}
	"behaviour"
	"{"
	(processes+=Process ";"
	(processes+=Process ";" )*)?
	"}"
;

InitBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{InitBlock}
	"init" 
	"{" 
	init=State
	";"
	"}"
;

BlockSystem returns System:
	{BlockSystem}
	"system" name=SystemName "{"
	collective=BlockCollective
	(environment=Environment)?
	"}"
;

BlockCollective hidden(ML_COMMENT,SL_COMMENT,WS):
	"collective" "{"
	declarations+=ComponentBlockDeclaration+
	"}"
;
	
ComponentBlockDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
	(  
		ComponentBlockNew |  
		ComponentBlockForStatement
	)
;
	
ComponentBlockNew returns CBND hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockNew}
	"new"
	name=[ComponentName|UPPERST] 
	arguments=ComponentBlockArguments
//	("["population=INT"]")?
	";"
;

ComponentBlockSpawn returns CBND hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockSpawn}
	"new"
	name=[ComponentName|UPPERST] 
	arguments=ComponentBlockArguments
//	("["population=INT"]")?
;

ComponentBlockArguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentBlockArguments}
	"("
	(arguments+=CompArguments
	( "," arguments+=CompArguments )*)?
	")"
;

ComponentBlockForStatement hidden(ML_COMMENT,SL_COMMENT,WS):
	"for" "(" variable=AttribVariableDeclaration ";" expression=BooleanExpression ";" afterThought=ComponentAfterThought")" 
	componentBlockForBlock=ComponentBlockForBlock
;

ComponentBlockForBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	"{"
	component=ComponentBlockNew
	"}" ";"
;

//LineSystem returns System:
//	{LineSystem}
//	"system" name=SystemName "{"
//	collective=LineCollective
//	processes=Processes
//	(environment=Environment)?
//	"}"
//;
//
//LineCollective hidden(ML_COMMENT,SL_COMMENT,WS):
//	"collective" "{"
//	components+=ComponentLine+
//	"}"
//;
//
//
//ComponentLine returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
//	(
//		{ComponentLineForStatement} component=ComponentLineForStatement |
//		{ComponentLineDefinition} component=ComponentLineDefinition
//	)
//;
//	
//ComponentLineForStatement hidden(ML_COMMENT,SL_COMMENT,WS):
//	"for" "(" variable=AttribVariableDeclaration ";" expression=BooleanExpression ";" afterThought=ComponentAfterThought")" 
//	componentBlockForBlock=ComponentLineForBlock
//;
//
//ComponentLineForBlock hidden(ML_COMMENT,SL_COMMENT,WS):
//		"{"
//		component=ComponentLineDefinition
//		"}" ";"
//;
//	
//ComponentLineDefinition returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
//	{ComponentLineDefinition}
//	componentSignature=ComponentLineSignature
//	("["population=INT"]")?
//	";"
//;
//
//ComponentLineSignature returns ComponentSignature hidden(ML_COMMENT,SL_COMMENT,WS):
//	name=ComponentName
//	"("
//	init=State
//	","
//	"{"
//	store=StoreLine
//	"}"
//	")"
//;
//
//ComponentLineDefinitionSpawn returns Component hidden(ML_COMMENT,SL_COMMENT,WS):
//	{ComponentLineDefinitionSpawn}
//	name=ComponentName
//	"("
//	init=State
//	","
//	"{"
//	store=StoreLine
//	"}"
//	")"
//	("["population=INT"]")?
//;
//	
//StoreLine hidden(ML_COMMENT,SL_COMMENT,WS):
//	{StoreLine}
//	(attributes+=StoreDeclaration
//	( "," attributes+=StoreDeclaration )*)?
//;
	
ComponentAfterThought hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentAfterThought}
	componentAssignment=ComponentAssignment
;
////////////////////////////////////////////////////PROCESS
Processes hidden(ML_COMMENT,SL_COMMENT,WS):
	"abstract" "{"
	processes+=Process ";"
	( processes+=Process ";" )*
	"}"
;

Process hidden(ML_COMMENT,SL_COMMENT,WS):
	name=ProcessName
	"="
	processExpression=ProcessExpression 
;

ProcessExpression returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionChoice
;

ProcessExpressionChoice returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionPrimary ({ProcessExpressionChoice.left=current}  "+" right=ProcessExpressionPrimary)*
;

ProcessExpressionPrimary returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	"(" ProcessExpression ")" |
	ProcessExpressionAtomic
;

ProcessExpressionAtomic returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionLeaf					|
	ProcessExpressionGuard 					|
	ProcessExpressionAction 				|
	ProcessExpressionReference 
;

ProcessExpressionGuard returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionGuard} expression=Guard
	reference=ProcessExpressionPrimary
;

ProcessExpressionAction returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionAction} expression=Action
	"."
	reference=ProcessExpressionPrimary
;

ProcessExpressionReference returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionReference} expression=[ProcessName|UPPERST]
;

ProcessExpressionLeaf returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionLeaf} (expression="nil" |	expression="kill")
;

Guard hidden(ML_COMMENT,SL_COMMENT,WS):
	{Guard} "[" booleanExpression=BooleanExpression "]"
;

Action hidden(ML_COMMENT,SL_COMMENT,WS):
	{Action}
	name=ActionName
	(
		action=MultiCast | action=UniCast		
	)
;

MultiCast returns Cast hidden(ML_COMMENT,SL_COMMENT,WS):
	{MultiCast}
	"*" 
	(
		predicate=ActionGuard io=IO | 
		io=IO | 
		spont=SpontaneousAction
	)
;

UniCast returns Cast hidden(ML_COMMENT,SL_COMMENT,WS):
	{UniCast}
	(
		predicate=ActionGuard io=IO |
		io=IO
	)
;

IO hidden(ML_COMMENT,SL_COMMENT,WS):
	( 
		InputAction			|
		OutputAction
	)
;

SpontaneousAction hidden(ML_COMMENT,SL_COMMENT,WS):
	{SpontaneousAction} (update=Update)?
;

InputAction returns IO  hidden(ML_COMMENT,SL_COMMENT,WS):
	{InputAction}  inputActionArguments=InputActionParameters (update=Update)?
;

InputActionParameters hidden(ML_COMMENT,SL_COMMENT,WS):
	{InputActionParameters}
	"(" 
	(parameters+=InputName
	( "," parameters+=InputName )* )?
	")"
;

OutputAction returns IO hidden(ML_COMMENT,SL_COMMENT,WS):
	{OutputAction} outputActionArguments=OutputActionArguments (update=Update)?
;

OutputActionArguments hidden(ML_COMMENT,SL_COMMENT,WS):
	{OutputActionArguments}
	"<"
	(outputArguments+=OutputActionArgument
	( "," outputArguments+=OutputActionArgument )*)?
	">"
;

OutputActionArgument returns OutputActionArgument hidden(ML_COMMENT,SL_COMMENT,WS):
	(
		ref=VariableReference 	|	
		value=CarmaInteger
	)
;

Update hidden(ML_COMMENT,SL_COMMENT,WS):
	{Update} "{" (updateAssignment+=UpdateAssignment ( "," updateAssignment+=UpdateAssignment)*)? "}"
;


ActionGuard hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionGuard} "[" booleanExpression=BooleanExpression "]"
;
////////////////////////////////////////////////////EXPRESSIONS
BooleanExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{BooleanExpression} expression=Expression
;

UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateExpression} expression=Expression
;

MethodExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{MethodExpression} expression=Expression
;

EnvironmentProbExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentProbExpression} expression=Expression
;

EnvironmentRateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentRateExpression} expression=Expression
;

EnvironmentUpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentUpdateExpression} expression=Expression
;

ComponentExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ComponentExpression} expression=Expression
;

Expression returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	{Expression} expression=Or
;

Or returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	And ({Or.left=current} "||" 
		right=And
	)*
;

And returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Equality ({And.left=current} "&&" 
		right=Equality
	)*
;
	
Equality returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Comparison (
		{Equality.left=current} op=("=="|"!=")
		right=Comparison
	)*
;

Comparison returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Subtraction ({Comparison.left=current} op=(">="|"<="|">"|"<") 
		right=Subtraction
	)*
;

Subtraction returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Addition ({Subtraction.left=current} '-' 
		right=Addition
	)*
;

Addition returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Multiplication ({Addition.left=current} '+' 
		right=Multiplication
	)*
;

Multiplication returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	Modulo ({Multiplication.left=current} '*' 
		right=Modulo
	)*
;

Modulo returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS): 
	Division ({Modulo.left=current} '%' 
		right=Division
	)*
;

Division returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS): 
	Primary ({Division.left=current} '/' 
		right=Primary
	)*
;

Primary returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' Expression ')' | 
	{Not} "!" expression=Primary |
	Atomic
;

Atomic returns Expressions hidden(ML_COMMENT,SL_COMMENT,WS):
	{AtomicPrimitive}			value=PrimitiveType 	|
	{AtomicVariable}			value=VariableReference |
	{AtomicMethodReference}		value=MethodReference	|
	{AtomicNow}					value=Now				|
	{AtomicMeasure}				value=SetComp			|
	{AtomicMacro}				value=State				|
	{AtomicRecord}				value=InstantiateRecord	|
	{AtomicOutcome}				value=OutcomeProbability
;
////////////////////////////////////////////////////MEASURES

MeasureBlock returns MeasureBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	"measures" "{"
	measures+=Measure ";"
	(measures+=Measure+ ";")*
	"}"
;

Measure returns Measure hidden(ML_COMMENT,SL_COMMENT,WS):
	"measure" name=MeasureName parameters=MeasureVariableDeclarations "="  measure=SetComp 
;

MeasureVariableDeclarations hidden(ML_COMMENT,SL_COMMENT,WS):
	"["
	variables+=MeasureVariableDeclaration
	("," variables+=MeasureVariableDeclaration+)*
	"]"
;
	
////////////////////////////////////////////////////ENVIRONMENT	
Environment hidden(ML_COMMENT,SL_COMMENT,WS):
	{Environment}
	"environment" 
	"{"
	(stores=GlobalStoreBlock)?
	(probabilityBlock=ProbabilityBlock)?
	(rateBlock=RateBlock)?
	(updateBlock=UpdateBlock)?
	"}"
;

GlobalStoreBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{GlobalStoreBlock}
	"store" 
	"{" 
	(attributes+=StoreDeclaration ";"
	( attributes+=StoreDeclaration ";" )*)?
	"}"
;
	
ProbabilityBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProbabilityBlock}
	"prob" 
	"{"
		(probabilities+=Probability+ ";")*
		("default" ":" value=CarmaDouble ";")?
	"}"
;
	
Probability returns EvolutionRule hidden(ML_COMMENT,SL_COMMENT,WS):
	{Probability}
	guard=EnvironmentGuard stub=ActionStub ":" expression=EnvironmentProbExpression
;

RateBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{RateBlock}
	"rate"
	"{"
		(rates+=Rate+ ";")*
		("default" ":" value=CarmaDouble ";")?
	"}"
;

Rate returns EvolutionRule hidden(ML_COMMENT,SL_COMMENT,WS):
	{Rate}
	guard=EnvironmentGuard stub=ActionStub ":" expression=EnvironmentRateExpression
;
	
UpdateBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateBlock}
	"update"
	"{"
		(updates+=EnvironmentUpdate+ ";")*
	"}"
;

EnvironmentUpdate returns EvolutionRule hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentUpdate}
	guard=EnvironmentGuard stub=ActionStub ":" 
	((expression+=EnvironmentUpdateAssignment ("," expression+=EnvironmentUpdateAssignment+)*)? 
	("," spawn=Spawn)? | spawn=Spawn)
;

EnvironmentGuard hidden(ML_COMMENT,SL_COMMENT,WS):
	{EnvironmentGuard} "[" booleanExpression=BooleanExpression "]"
;

ActionStub hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionStub} name=[ActionName|LOWERST] (type=BroadCast)?
;

BroadCast:
	"*"
;

Now hidden(ML_COMMENT,SL_COMMENT,WS):
	"now"
;


terminal BOOLEANVALUE: 		('true' | 'false');
terminal LOWERST: 			("a".."z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal UPPERST: 			("A".."Z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;