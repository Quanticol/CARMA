grammar eu.quanticol.carma.core.CARMA with org.eclipse.xtext.common.Terminals

generate carma "http://www.quanticol.eu/carma/core/CARMA"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Model: {Model}
	(elements += Element)*
;

Element: 
	FunctionDefinition 
	| RecordDefinition 
	| Processes 
	| ConstantDefinition 
	| ComponentDefinition 
	| EnumDefinition
	| MeasureDefinition
	| SystemDefinition
	| CollectiveDefinition
	| SpaceDefinition
;

SpaceDefinition:
	'space' name=ID '(' (parameters += Variable (',' parameters +=Variable )*)? ')' '{'
		('universe' '<' universe += UniverseElement (',' universe += UniverseElement )* '>')?
		'nodes' '{'
			(nodes += NodeBodyCommand)*
		'}'
		'connections' '{' 
			(edges += ConnectionBodyCommand)*
		'}' 
		('areas' '{'
			(labels += LabelDefinition)*
		'}')?	
	'}'
;

UniverseElement:
	type=ValueType name=ID
;

NodeBodyCommand:
	NodeDeclaration|NodeIfThenElseCommand|NodeForLoop|NodeBlockCommand
;

NodeForLoop:
	"for" ({NodeForCommand} variable=IterationVariable 'from' start=Expression ('by' step=Expression)? 'to' end=Expression  
		body=NodeBodyCommand
		| {NodeForEach} iteration=LoopingVariable body=NodeBodyCommand
	)
;


NodeBlockCommand: {NodeBlockCommand}
	'{'
			(nodes += NodeBodyCommand)*
	'}'	
;

NodeIfThenElseCommand:
	'if' '(' condition=Expression ')'
		thenBlock = NodeBodyCommand
	(=> 'else' elseBlock = NodeBodyCommand)?	
;

NodeDeclaration: 
	NamedNode | UnNamedNode
;

NamedNode:
	name=ID ('[' values += Expression (',' values += Expression )*']')? ';'
;

UnNamedNode:
	'[' values += Expression (',' values += Expression )* ']' ';'
;

//LocationFeature:
//	'feature' type=BasicType name=ID '(' (parameters += Variable (',' parameters+=Variable)*)? ')' 
//		body=FunctionCommand
//;

LabelDefinition:
	name=ID '{' ( nodes+=AreaBodyCommand )* 
	'}' 
//	('{'
//		(features += AreaFeature ';')*
//	'}')?
;

AreaBodyCommand:
	AreaElementDeclaration|AreaIfThenElseCommand|AreaForLoop|AreaBlockCommand
;

AreaElementDeclaration:
	node=LocationExpression ';'	
;

AreaForLoop:
		"for" ({AreaForCommand} variable=IterationVariable 'from' start=Expression ('by' step=Expression)? 'to' end=Expression  
		body=AreaBodyCommand
		| {AreaForEach} iteration=LoopingVariable body=AreaBodyCommand
	)	
;

AreaBlockCommand: {AreaBlockCommand}
	'{'
			(nodes += AreaBodyCommand)*
	'}'	
;

AreaIfThenElseCommand:
	'if' '(' condition=Expression ')'
		thenBlock = AreaBodyCommand
	(=> 'else' elseBlock = AreaBodyCommand)?	
;


AreaFeature:
	name=ID '=' value=Expression
;

AreaDefinitionCase:
	pattern=NodePattern (':' guard=Expression )?
;

ConnectionDeclaration:
	source=LocationExpression direction=Direction target=LocationExpression ('{' (edgeProperties += EdgeProperty (',' edgeProperties += EdgeProperty)*)? '}')? ';'	
;

ConnectionForLoop:
		"for" ({ConnectionForCommand} variable=IterationVariable 'from' start=Expression ('by' step=Expression)? 'to' end=Expression  
		body=ConnectionBodyCommand
		| {ConnectionForEach} iteration=LoopingVariable body=ConnectionBodyCommand
	)	
;

ConnectionBodyCommand:
	ConnectionDeclaration|ConnectionIfThenElseCommand|ConnectionForLoop|ConnectionBlockCommand
;

ConnectionBlockCommand: {ConnectionBlockCommand}
	'{'
			(edges += ConnectionBodyCommand)*
	'}'	
;

ConnectionIfThenElseCommand:
	'if' '(' condition=Expression ')'
		thenBlock = ConnectionBodyCommand
	(=> 'else' elseBlock = ConnectionBodyCommand)?	
;


EdgeProperty:
	name=ID '=' value=Expression
;

Direction:
	{DirectedEdge} '->'
	| {UnDirectedEdge} '<->'
;

NodePattern:
	NamedPattern|UnNamedPattern
;

NamedPattern returns NodePattern:
	ref=[NamedNode] ('[' elements += PatternElement (',' elements += PatternElement)* ']')?
;

UnNamedPattern returns NodePattern:
	'[' elements += PatternElement (',' elements += PatternElement)* ']'
;


LocationExpression:
	NamedLocationExpression
	| 
	UnNamedLocationExpression
;

NamedLocationExpression:
	ref=[NamedNode] ('[' values += Expression (',' values+=Expression )* ']')?
;	

UnNamedLocationExpression:
	'[' values += Expression (',' values+=Expression )* ']'
;

LocationExpressionValue:
	value=Expression
;

LocationVariable:
	'?' name=ID
;

PatternElement:
	//LocationIntegerValue|LocationReference|
	LocationExpressionValue|LocationVariable|AnyValue
;

AnyValue: {AnyValye}
	'_'
;

CollectiveDefinition:
	'collective' name=ID 
		block = CollectiveBlock
;

CollectiveBlock: {CollectiveBlock} '{'
			//collective += ComponentBlockDeclaration 
			(collective+=ComponentBlockDeclaration)*
	'}'
;

////////////////////////////////////////////////////RECORDS, ENUMS AND TYPES

EnumDefinition:
	'enum' name=ID '=' values += EnumCase (',' values += EnumCase )* ';'
;

RecordDefinition returns RecordDefinition hidden(ML_COMMENT,SL_COMMENT,WS):
	'record' name=ID '=' '[' fields += FieldDefinition (','  fields += FieldDefinition)* ']' ';'
;

FieldDefinition:
	fieldType=BasicType name=ID
;

ReferenceableType:
	EnumDefinition|RecordDefinition
;

EnumCase:
	name=ID
;

ConstantDefinition:
	'const' name=ID '=' value=Expression ';'
;

ValueType hidden(ML_COMMENT,SL_COMMENT,WS):
		{ProcessType} "process"	|
		BasicType
;

BasicType:
		IntegerType |
		RealType |
		BooleanType |
		CustomType |
//		ArrayType |
		ListType |
		SetType |
		LocationType
;

IntegerType: {IntegerType} "int" ('[' min=Expression '..' max=Expression ']')?;

LocationType: {LocationType} "location";

RealType: {RealType} "real" ;

BooleanType: {BooleanType} "bool";

CustomType: {CustomType} reference=[ReferenceableType];

//ArrayType: 'array' '<' arg=BasicType '>';

ListType: 'list' '<' arg=BasicType '>';

SetType: 'set' '<' arg=BasicType '>';

////////////////////////////////////////////////////VARIABLES AND REFERENCES

Variable:
	type=ValueType name=ID
;

UntypedVariable:
	name=ID
;

ReferenceableElement:
	IterationVariable |
	LoopingVariable |
	UntypedVariable|
	Variable|
	AttributeDeclaration|
	FunctionDefinition|
	EnumCase|
	ConstantDefinition|
	ProcessState|
//	MeasureVariableDeclaration|
	NamedNode|
	LocationVariable|
	FieldDefinition|
	LabelDefinition|	
	UniverseElement|
	MeasureDefinition|
	EdgeProperty
;

////////////////////////////////////////////////////FUNCTIONS
FunctionDefinition:
	"fun" type=BasicType name=ID
	'('
	(parameters += Variable (',' parameters+=Variable)*)?
	')' body=BlockCommand
;
	
FunctionCommand:
	IfThenElseCommand 
	| ReturnCommand 
	| VariableDeclarationCommand 
	| ForLoop 
	| BlockCommand 
	| AssignmentCommand
;

AssignmentCommand:
	target=AssignmentTarget (':='|'=') value=Expression ';'
;

AssignmentTarget:
	TargetAssignmentVariable ({TargetAssignmentField.target=current} '.' field = [FieldDefinition]
		| {TargetAssignmentList.target=current} '[' index=Expression ']' )*
;

TargetAssignmentVariable returns AssignmentTarget: {TargetAssignmentVariable}
	variable=[Variable]	
;

BlockCommand: {BlockCommand}
	'{'
		(commands += FunctionCommand)*
	'}'	
;



ForLoop:
	"for" ({ForCommand} variable=IterationVariable 'from' start=Expression ('by' step=Expression)? 'to' end=Expression  
		body=FunctionCommand
		| {ForEach} iteration=LoopingVariable body=FunctionCommand
	)
;

LoopingVariable:
	name=ID 'in' value=Expression
;

IterationVariable:
	name=ID
;

VariableDeclarationCommand:
	variable = Variable ((':='|'=') value = Expression)? ';'
;

ReturnCommand:
	'return' expression=Expression ';'
;

IfThenElseCommand:
	'if' '(' condition=Expression ')'
		thenBlock = FunctionCommand
	(=> 'else' elseBlock = FunctionCommand)?
;


////////////////////////////////////////////////////ASSIGNMENT

UpdateCommand hidden(ML_COMMENT,SL_COMMENT,WS):
	AttributeTarget (
		{UpdateAssignment.target=current} (":="|"="|'<-') expression=Expression ";" 
		| {UpdateCollectionAdd.target=current} "." "add" "(" expression=Expression ")" ";"
		| {UpdateCollectionRemove.target=current} "." "remove" "(" expression=Expression ")" ";"
		| {UpdateArrayElement.target=current} ('[' indexes+=Expression ']')+ (":="|"="|'<-') expression=Expression ";"
	)
;

AttributeTarget:
	MyContext | GlobalContext | AttributeReference
;

MyContext:{MyContext} 
    "my" "." attribute=AttributeReference
;

AttributeReference:
	StoreAttribute|LocAttribute
;

StoreAttribute:
	reference = [AttributeDeclaration]
;

LocAttribute: {LocAttribute}
	'loc'
;
////////////////////////////////////////////////////STATE

ProcessComposition returns ProcessComposition hidden(ML_COMMENT,SL_COMMENT,WS):
	ParallelComposition
; 
	
ParallelComposition returns ProcessComposition hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessReference ({ParallelComposition.left=current}  "|" right=ProcessReference)*
;

ProcessReference returns ProcessComposition hidden(ML_COMMENT,SL_COMMENT,WS):
	 {ProcessReference} expression=[ReferenceableElement]
;

////////////////////////////////////////////////////SET COMPREHENSION

SetComp hidden(ML_COMMENT,SL_COMMENT,WS):
	{SetComp} 
	"#" 
	"{" 
	variable=ComponentComprehension
	"|"
	predicate=Expression
	"}"
; 

////////////////////////////////////////////////////COMPONENT COMPREHENSION
ComponentComprehension returns ComponentComprehension  hidden(ML_COMMENT,SL_COMMENT,WS):
	 {AllComponents} 		"*" ("[" states = ProcessComposition "]")?											|
	 {AComponentAllStates}	comp=[ComponentDefinition] "[" "*" "]"		|
	 {AComponentAState}		comp=[ComponentDefinition] "[" state = ProcessComposition "]" 
;

////////////////////////////////////////////////////SPAWN
BlockSpawn hidden(ML_COMMENT,SL_COMMENT,WS):
	{BlockSpawn} comp+=ComponentBlockInstantiation ("," comp+=ComponentBlockInstantiation+)*
;

//////////////////////////////////////////////////////PREDEFINED METHODS	
//PreFunctionCall returns PreFunctionCall hidden(ML_COMMENT,SL_COMMENT,WS):
//	(	
//	{PDFunction} 		name="PDF"		| 
//	{UniformFunction} 	name="Uniform"	| 
//	{CeilingFunction} 	name="Ceiling"	|
//	{FloorFunction} 	name="Floor"	|
//	{MaxFunction}		name="Max"		|
//	{MinFunction}		name="Min"
//	)
//	arguments=PredFunctionCallArguments 
//;


////////////////////////////////////////////////////COMPONENT
ComponentDefinition hidden(ML_COMMENT,SL_COMMENT,WS):
	"component" name=ID '(' (parameters += Variable (',' parameters +=Variable )*)? ')'
	"{"
	store=StoreBlock
	processes=ProcessesBlock
	initBlock=InitBlock
	"}"
;

StoreBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{StoreBlock}
	"store" 
	"{" 
		(attributes+=AttributeDeclaration ";" )*
	"}"
;

AttributeDeclaration:
	{AttributeConstDeclaration} "const" name=ID (":="|"=") value=Expression
	| {AttibuteVarDeclaration} ("attrib")? (type=BasicType)? name=ID  (":="|"=") value=Expression
	;
	
ProcessesBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessesBlock}
	"behaviour"
	"{"
		(processes+=ProcessState ";" )*
	"}"
;

InitBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{InitBlock}
	"init" 
	"{" 
		init=ProcessComposition
	"}"
;

SystemDefinition:
	"system" name=ID '{'
		('space' space=[SpaceDefinition] '(' (args += Expression ( ',' args+= Expression )*)? ')')?
		'collective' collective=SystemCollective
		(environment=Environment)?
		
	'}'
;

//'{'
//			collective += ComponentBlockDeclaration (collective+=ComponentBlockDeclaration)*			
//		'}'

SystemCollective: 
	CollectiveBlock |
	CollectiveReference	
;

CollectiveReference:
	reference=[CollectiveDefinition] 
;

ComponentBlockDeclaration :
	(  
		UpdateCommand|
		ComponentBlockNew |  
		ComponentBlockFor |
		ComponentBlockConditionalStatement 
	)
;

ComponentBlockConditionalStatement:
	"if" '(' guard=Expression ')' '{'
		(thenBranch += ComponentBlockDeclaration)*
	'}' (=> 'else' '{'
		(elseBranch += ComponentBlockDeclaration)*
	'}'	
	)?
;
	
ComponentBlockNew returns ComponentBlockInstantiation:
	ComponentBlockInstantiation
	";"
;

ComponentBlockInstantiation hidden(ML_COMMENT,SL_COMMENT,WS):
	"new"
	name=[ComponentDefinition] 
	'(' (arguments+=Range (',' arguments+=Range)* )? ')'
	('@' location=Atomic )?
	("<"population=Atomic ">")?
;

ComponentBlockFor hidden(ML_COMMENT,SL_COMMENT,WS):
	"for" ({ComponentBlockForStatement} "(" variable=IterationVariable ";" expression=Expression ";" afterThought=Expression ")" '{'
			(collective += ComponentBlockDeclaration)*			
			'}'
			|{ComponentBlockIteratorStatement} iteration=LoopingVariable '{'
				(collective += ComponentBlockDeclaration)*			
			'}'
			)
;

////////////////////////////////////////////////////PROCESS
Processes hidden(ML_COMMENT,SL_COMMENT,WS): {Processes}
	"abstract" "{"
		( processes+=ProcessState ";" )*
	"}"
;

ProcessState hidden(ML_COMMENT,SL_COMMENT,WS):
	name=ID
	"="
	processExpression=ProcessExpression 
;

ProcessExpression returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionChoice
;

ProcessExpressionChoice returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	ProcessExpressionGuard ({ProcessExpressionChoice.left=current}  "+" right=ProcessExpressionGuard)*
;

ProcessExpressionGuard returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProcessExpressionGuard} guard=Guard expression=ProcessExpressionGuard
	| ProcessExpressionPrimary
;

ProcessExpressionPrimary returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	"(" ProcessExpression ")" |
	ProcessExpressionAction
;

ProcessExpressionAction hidden(ML_COMMENT,SL_COMMENT,WS):
	action=Action "." next=ProcessExpressionNext	
;

ProcessExpressionNext:
		{ProcessExpressionNil} "nil"
	| {ProcessExpressionKill} "kill"
	| {ProcessExpressionReference} expression=[ProcessState]
;

Guard hidden(ML_COMMENT,SL_COMMENT,WS):
	"[" booleanExpression=Expression "]"
;

Activity:
	name=ID (isBroadacst?='*')? (predicate=ActionGuard)? 	
;

Action hidden(ML_COMMENT,SL_COMMENT,WS):
	Activity (
		{OutputAction.activity=current} 
			(withData?="<" (outputArguments+=Expression ( "," outputArguments+=Expression )*)? ">")? 
			(update=Update)?
		| {InputAction.activity=current} 
			"(" 
				(parameters+=UntypedVariable
				( "," parameters+=UntypedVariable )* )?
			")"
			(update=Update)?
	)
;

//IO hidden(ML_COMMENT,SL_COMMENT,WS):
//	( 
//		InputAction			|
//		OutputAction
//	)
//;
//
//InputAction returns IO  hidden(ML_COMMENT,SL_COMMENT,WS):
//	{InputAction}  "(" 
//	(parameters+=UntypedVariable
//	( "," parameters+=UntypedVariable )* )?
//	")"
//;
//
//OutputAction returns IO hidden(ML_COMMENT,SL_COMMENT,WS):
//	{OutputAction} "<"
//	(outputArguments+=Expression
//	( "," outputArguments+=Expression )*)?
//	">"
//;



Update hidden(ML_COMMENT,SL_COMMENT,WS):
	{Update} "{" (updateAssignment+=UpdateCommand ( updateAssignment+=UpdateCommand)*)? "}"
;

ActionGuard hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionGuard} "[" guard=Expression "]"
;
////////////////////////////////////////////////////Expression

Range returns Expression:
	Expression ({Range.min=current} ":" max=Expression (":" step=Expression)?)?
;



Expression hidden(ML_COMMENT,SL_COMMENT,WS):
//	{LambdaExpression} 'lambda' '<' variables+=Variable (',' variables+=Variable )* '>' '->' body = Or |
	Or
;



Or returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	And ({Or.left=current} "||" 
		right=And
	)*
;

And returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Relation ({And.left=current} "&&" 
		right=Relation
	)*
;
	
Relation returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	SumDiff => (
		{Equality.left=current} '==' right=SumDiff
		| {DisEquality.left=current} '!=' right=SumDiff
		| {Less.left=current} '<' right=SumDiff
		| {LessOrEqual.left=current} '<=' right=SumDiff
		| {Greater.left=current} '>' right=SumDiff
		| {GreaterOrEqual.left=current} '>=' right=SumDiff
		| {IsIn.left=current} 'in' right=SumDiff
	)?
;

SumDiff returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	MulDiv (
		{Subtraction.left=current} '-' right=MulDiv
		| {Addition.left=current} '+' right=MulDiv
	)*
;

MulDiv returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Modulo ({Multiplication.left=current} '*' right=Modulo
		| {Division.left=current} '/' right=Modulo
	)*
;

Modulo returns Expression hidden(ML_COMMENT,SL_COMMENT,WS): 
	Primary ({Modulo.left=current} '%' 
		right=Primary
	)?
;

Primary returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' Expression 	
		({IfThenElseExpression.guard=current} "?" thenBranch=Expression ":" elseBranch=Expression)? 
			")" | 
	{Not} "!" expression=Primary |
	{UnaryPlus} '+' expression=Primary |
	{UnaryMinus} '-' expression=Primary | 
	ArrayRecordAccess 	
;

  ArrayRecordAccess returns Expression:
	Atomic => ( 
		{FieldAccess.source=current} '.' field=[ReferenceableElement]
		| 
		{NodeExpressionOrArrayAccess.source=current} '[' values += Expression (',' values += Expression)* ']'
		| 
		{PreSetExpression.source=current} "." "pre"
		| 
		{PoSetExpression.source=current} "." "post"
		| 
		{InEdgesExpression.source=current} "." "incoming" "(" (arg = Expression)? ")"
		| 
		{OutEdgesExpression.source=current} "." "outgoing" "(" (arg = Expression)? ")"
		| 
		{EdgeSourceExpression.source=current} "." "source"
		| 
		{EdgeTargetExpression.source=current} "." "target"
		|
		{MapFunction.arg1=current} "." "map" "(" arg2 = Expression ")"
		|
		{FilterFunction.arg1=current} "." "filter" "(" arg2 = Expression ")"
		|
		{ExistsFunction.arg1=current} "." "exist" "(" arg2 = Expression ")"
		|
		{ForAllFunction.arg1=current} "." "forall" "(" arg2 = Expression ")"
		|
		{SelectFunction.arg1=current} "." "select" "(" arg2 = Expression ")"
	)*
;

Atomic returns Expression hidden(ML_COMMENT,SL_COMMENT,WS):
	Reference 
	| CollectionAtomicExpression
	| {MaxInt} "MAXINT"
	| {MinInt} "MININT"
	| {MaxReal} "MAXREAL"
	| {MinReal} "MINREAL"
	| {LambdaParameter} "@"
	| {Locations} "locations"
	| {MyLocation} "loc"
	| {AtomicTrue} "true"
	| {AtomicFalse} "false"
	| {AtomicInteger} value=INT 
	| {AtomicReal} value=REAL 
	| {AtomicRecord} '[' fields += FieldAssignment (',' fields += FieldAssignment)* ']' 
	| {AtomicNow} "now"
	| {None} "none" 
	| SetComp				
	| AtomicRnd
	| {AtomicPi} "PI"
	| {AtomicExp} "E"
	| NormalSampling
	| WeightedChoice
	| BuiltInFunctions
	| MyContext
	| {ReceiverContext} "receiver" "." attribute=AttributeReference
	| {SenderContext} "sender" "." attribute=AttributeReference
	| GlobalContext
	| {CastToReal} "real" '(' arg=Expression ')'
	| {CastToInteger} "int" '(' arg=Expression ')'
	| {TupleExpression} '[' values += Primary (',' values += Primary )* ']'
//	| {AtomicOutcome}				value=OutcomeProbability	THE ROLE OF THIS CASES IS NOT CLEAR FOR ME.
//	| {AtomicProcessComposition}	value=ProcessComposition
;

AtomicRnd:
	{AtomicRnd} "RND"	
;

NormalSampling:
	"NORMAL" '(' mean=Expression ',' sd=Expression ')'	
;

GlobalContext:
	"global" "." reference=[AttributeDeclaration]
;

CollectionAtomicExpression returns Expression:
	  {SetExpression} '{:' (values += Expression (',' values += Expression )*)? ':}'
	| {ListExpression} '[:' (values += Expression (',' values += Expression )*)? ':]'		
;


BuiltInFunctions returns Expression :
	{AbsFunction} "abs" '(' arg=Expression ')' 
			//The absolute value of arg.
	| {AcosFunction} "acos" '(' arg=Expression ')' 
			//The arc cosine of arg; the returned angle is in the range 0.0 through pi.
	| {AsinFunction} "asin" '(' arg=Expression ')' 
			//The arc sine of a value; the returned angle is in the range -pi/2 through pi/2.
	| {AtanFunction} "atan" '(' arg=Expression ')' 
			//Returns the arc tangent arg; the returned angle is in the range -pi/2 through pi/2.
	| {Atan2Function} "atan2" '(' first=Expression ',' second=Expression ')'
			//The angle theta from the conversion of rectangular coordinates (first, second) to polar coordinates (r, theta).
	| {CbrtFunction} "cbrt" '(' arg=Expression ')'
			//The cube root of arg.
	| {CeilFunction} "ceil" '(' arg=Expression ')'
			//The smallest (closest to negative infinity) double value that is greater than or equal to the argument and is equal to a mathematical integer.
	| {CosFunction} "cos" '(' arg=Expression ')'
			//Returns the trigonometric cosine of an angle.
	| {ExpFunction} "exp" '(' arg=Expression ')'
			//Returns Euler's number e raised to the power of a double value.
	| {FloorFunction} "floor" '(' arg=Expression ')'
			//Returns the largest (closest to positive infinity) double value that is less than or equal to the argument and is equal to a mathematical integer.
	| {LogFunction} "log" '(' arg=Expression ')'
			//Returns the natural logarithm (base e) of a double value.
	| {Log10Function} "log10" '(' arg=Expression ')'
			//Returns the base 10 logarithm of a double value.
	| "max" ({MaxFunction} '(' first=Expression ',' second=Expression ')'
		| {MaxMeasure} '{' value=Expression ('|' guard=Expression)? '}'
	)
	| "min" ({MinFunction} '(' first=Expression ',' second=Expression ')'
		| {MinMeasure} '{' value=Expression ('|' guard=Expression)? '}'
	)
	| "avg" {AverageMeasure} '{' value=Expression ('|' guard=Expression)? '}'
	| {PowFunction} "pow" '(' first=Expression ',' second=Expression ')'
	| {SinFunction} "sin" '(' arg=Expression ')'
			//Returns the trigonometric sine of an angle.
	| {SqrtFunction} "sqrt" '(' arg=Expression ')'
			//Returns the correctly rounded positive square root of a double value.
	| {TanFunction} "tan" '(' arg=Expression ')'
			//Returns the trigonometric tangent of an angle.
	| UniformFunction	
	//Fuctions on Graphs
	| {PreFunction} "pre" "(" arg=Expression ")"
	| {PostFunction} "post" "(" arg=Expression ")"
	| {AccessToEdgeValue} "edgeValues" "(" src=Expression "," label=[EdgeProperty] "," trg=Expression ")"
	//Functions on Collections
	| {NewListFunction} "newList" "(" arg1=BasicType ")"
	| {NewSetFunction} "newSet" "(" arg2=BasicType ")"
	| {SizeFunction} "size" "(" arg1 = Expression ")"
	| {HeadFunction} "head" "(" arg1 = Expression ")"
	| {TailFunction} "tail" "(" arg1 = Expression ")"
	| LambdaContext
;

RandomExpression:
	UniformFunction|NormalSampling|SelectFunction|AtomicRnd|WeightedChoice
;

LambdaContext:
	{MapFunction} "map" "(" arg1=Expression "," arg2=Expression ")"
	| {FilterFunction} "filter" "(" arg1=Expression "," arg2=Expression ")"
	| {ExistsFunction} "exist" "(" arg1=Expression "," arg2=Expression ")"
	| {ForAllFunction} "forall" "(" arg1=Expression "," arg2=Expression ")"
	| SelectFunction
//	| {ReduceFunction} "reduce" "(" arg1 = Expression "," arg2=Expression "," arg3=Expression ")"
;

WeightedChoice:
	"selectFrom" "(" values+=Expression ":" weights+=Expression (',' values+=Expression ":" weights+=Expression)* ")"
;

SelectFunction:
	"select" "(" arg1 = Expression "," arg2=Expression ")"	
;

UniformFunction: 
	"U" (
		 ('(' args+=Expression (',' args+=Expression)* ')' )
		| ( args +=	CollectionAtomicExpression )		
	)
;

FieldAssignment:
	field=[FieldDefinition] (':='|'<-'|'=') value=Expression
;

////////////////////////////////////////////////////REFERENCE


Reference hidden(ML_COMMENT,SL_COMMENT,WS):
	reference=[ReferenceableElement] ( isCall ?= '(' ( args+=Expression ( ',' args+=Expression )* )? ')' )?
;

////////////////////////////////////////////////////MEASURES

MeasureDefinition hidden(ML_COMMENT,SL_COMMENT,WS):
	"measure" name=ID 
		("(" variables+=Variable ("," variables+=Variable+)* ")" )?
		"="  measure=Expression  ';'
;

//MeasureDefinition hidden(ML_COMMENT,SL_COMMENT,WS):
//	"measure" name=ID 
//		("[" variables+=MeasureVariableDeclaration("," variables+=MeasureVariableDeclaration+)* "]" )?
//		"="  measure=Expression  ';'
//;


//MeasureVariableDeclaration hidden(ML_COMMENT,SL_COMMENT,WS):
//	{MeasureVariableDeclaration} name=ID	":="	assign= Range
//;

	
////////////////////////////////////////////////////ENVIRONMENT	
Environment hidden(ML_COMMENT,SL_COMMENT,WS):
	{Environment}
	"environment" 
	"{"
	(store=StoreBlock)?
	(probabilityBlock=ProbabilityBlock)?
	(weightBlock=WeightBlock)?
	(rateBlock=RateBlock)?
	(updateBlock=UpdateBlock)?
	"}"
;

ProbabilityBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{ProbabilityBlock}
	("prob") 
	"{"
		(probabilities+=Probability )*
		("default"  value=BlockCommand)?
	"}"
;

WeightBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{WeightBlock}
	("weight") 
	"{"
		(weights+=Weight )*
		("default"  value=BlockCommand)?
	"}"
;


//Probability hidden(ML_COMMENT,SL_COMMENT,WS):
//	(guard=Guard)? stub=ActionStub ":" expression=Expression
//;


Probability hidden(ML_COMMENT,SL_COMMENT,WS):
	activity=[Activity] '*' expression=BlockCommand 
;

Weight hidden(ML_COMMENT,SL_COMMENT,WS):
	activity=[Activity] expression=BlockCommand 
;

RateBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{RateBlock}
	"rate"
	"{"
		(rates+=Rate)*
		("default"  value=BlockCommand)?
	"}"
;

Rate hidden(ML_COMMENT,SL_COMMENT,WS):
	{Rate}
	stub=ActionStub expression=BlockCommand 
;
	
UpdateBlock hidden(ML_COMMENT,SL_COMMENT,WS):
	{UpdateBlock}
	"update"
	"{"
		(updates+=EnvironmentUpdate)*
	"}"
;

EnvironmentUpdate hidden(ML_COMMENT,SL_COMMENT,WS):
	stub=ActionStub command=CollectiveBlock
;

ActionStub hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionStub} activity=[Activity] (isBroadcast?='*')?
;

terminal REAL returns ecore::EDouble:	('0'..'9')+ '.' ('0' .. '9')+ ('e' ('+'|'-')? ('0'..'9')+)?;
