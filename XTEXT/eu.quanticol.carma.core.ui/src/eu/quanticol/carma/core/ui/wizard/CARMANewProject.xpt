«IMPORT eu::quanticol::carma::ui::wizard»

«DEFINE main FOR CARMAProjectInfo»
«EXPAND model FOR this»
«ENDDEFINE»

«DEFINE model FOR CARMAProjectInfo»
«FILE "src/model/Model.carma"-»
fun Position Move(Position p){
	attrib a := Uniform(p.x -1, p.x, p.y + 1) % 3;
	attrib b := Uniform(p.y -1, p.y, p.y + 1) % 3;
	Position q := new Position(1,1);
	return q;
}

records {
	
	record Position(attrib a, attrib b){
		attrib x := a;
		attrib y := b;
	}
	
}

component Sensor(attrib a, attrib b, attrib c, state Z){
    
    store{
        attrib data := a;
        attrib type := 0;
        Position position := new Position(b,c);
    }

    behaviour{
        Sense 	= sense*{data := data + 1}.Sense;
        Send 	= [my.data > 0] send[type == 1]<1>{data := data - 1}.Send;
    }

    init{
        Z;
    }
}

component Monitor(attrib a, Position d){
    
    store{
        attrib data := a;
        attrib type := 1;
        Position position := d;
        
    }

    behaviour{
        Analyse = [my.data > 0] analyse*{data := data - 1}.Analyse;
        Receive = send[my.data < 10 && z == 1](z){data := data + z}.Receive;
    }
    
    init{
        Z;
    }
}

component Beacon(attrib a, attrib b){
	
	store{
        Position position := new Position(a,b);
        attrib battery := 0;
    }
    
    behaviour{
    	Broadcast = [battery > 0] broadcast*{battery := battery -1}.Broadcast + [battery <= 0] die*.nil;
    }
    
    init{
    	Broadcast;
    }
}

abstract{
	Move = move*{position := Move(my.position)}.Wait;
	Wait = wait*.Move;
}

measures{
	measure Waiting[ attrib i := 0..2, attrib j := 0..2] = #{ *  | data >= 0 };
}


system Simple{

    collective{
        new Sensor(1,0,0,Move);
        new Sensor(1,2,2,Move);
        new Monitor(1,new Position(0..2,0..2));
    }

    environment{
    	
    	store{
    		attrib reports 	:= 0;
    		attrib type 	:= 2;
    		Position center := new Position(1,1);
    	}
    	
    	prob{
    		[global.center == receiver.position] send : 1.0;
    		[receiver.position.x - global.center.x < 0] send : 0.75;
    		[receiver.position.x - global.center.x > 0] send : 0.5;
        	default : 0.25;
    	}
    	
        rate{
        	[sender.position.x == 0] move* : 10;
        	[sender.position.x == 1] move* : 5;
        	[sender.position.x == 2] move* : 2;
        	[true]	send 		: 0.5;
        	[true]	sense* 		: 1;
        	[true]	analyse* 	: 1;
        }
        
        update{
        	[true] send : global.reports := global.reports + 1;
        	[sender.data > 5] send : new Beacon(sender.position.x, sender.position.y);
        }
    }
}



«ENDFILE»
«ENDDEFINE»