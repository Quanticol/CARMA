«IMPORT eu::quanticol::carma::ui::wizard»

«DEFINE main FOR CARMAProjectInfo»
«EXPAND model FOR this»
«ENDDEFINE»

«DEFINE model FOR CARMAProjectInfo»
«FILE "src/model/Model.carma"-»
/**
 * The roving function: moves our rovers around the grid, they teleport!
 */
fun Position Roving(Position p){
    attrib pos_x := 0;
    pos_x := Uniform(0,1,1,2,2,2);
    attrib pos_y := 0;
    pos_y := Uniform(0,1,1,2,2,2);
    Position q := new Position(pos_x,pos_y);
    return q;
}

records {
	record Position(attrib a, attrib b){ 
		attrib x := a;
		attrib y := b;
	}
}

/**
 * The Rover component: 'Roves' about the grid sensing and attempting to send data to the above satellites
 */
component Rover(attrib a, attrib b,  process Z){

    store{
        attrib data := 0;
        attrib type := 0;
        Position myPosition := new Position(a,b);

    }

    behaviour{
        Sense     = sense*{data := data + 1}.Sense;
        Send     = [my.data > 0] send[type == 1]<1>{data := data - 1}.Send;
    }

    init{
        Sense|Send|Z;
    }
}

/**
 * The Satellite component: sits in geo-synchronous orbit, if it is not analysing data from a rover, 
 * it will do its own sensing. It sends analysed data as packages to earth.
 */
component Satelite(attrib a, attrib b){

    store{
        attrib data := 0;
        attrib packge := 0;
        attrib type := 1;
        Position myPosition := new Position(a,b);

    }

    behaviour{

        Analyse = [my.data > 0] analyse*{data := data - 1, packge := packge + 1}.Transmit
        + [my.data == 0] sense*{data := data + 1}.Transmit;

        Transmit = [my.packge > 0] transmit*{packge := packge - 1}.Analyse;

        Receive = send(z){data := data + z}.Receive;
    }

    init{
        Analyse|Receive;
    }
}

/**
 * The beacon component: Deployed when a send fails
 */
component Beacon(attrib a, attrib b){

    store{
        Position myPosition := new Position(a,b);
        attrib battery := 5;
    }

    behaviour{
        Signal = [my.battery > 0] signal*{battery := battery - 1}.Signal + [my.battery <= 0] die*.nil;
    }

    init{
        Signal;
    }
}

/**
 * Behaviours we might like to provide to more than one component
 */
abstract {
    Rove = rove*{myPosition := Roving(myPosition)}.Wait;
    Wait = wait*.Wait;
}

/**
 * Measures block: Count the number of X
 */
measures{
    measure Waiting[ attrib i := 0..2, attrib j := 0..2] = #{ *  | my.myPosition.x == i && my.myPosition.y == j };
}


/**
 * The system block
 */
system Simple{

	/**
	 * Starting with 3 Rovers, and 9 Satellites
	 */
    collective{
    	for(attrib i := 0; i < 2; i := i + 1){
    		new Rover(0..2,0..2,Rove);
    	};
        new Satelite(0..2,0..2);
    }

    environment{

        store{
            attrib reports  := 0;
            attrib type     := 2;
            Position center := new Position(1,1);
        }

        prob{
        	//depending on where the Rover is determines the chance of the satellite receiving the message
            [(receiver.myPosition.x - global.center.x < 0) && (receiver.myPosition.y - global.center.y == 0)]	send : 1;
            [(receiver.myPosition.x - global.center.x > 1)]	send : 0.75;
            [(receiver.myPosition.x - global.center.x < 0)]	send : 0.5;
            default : 0.25;
        }

        rate{
        	//different terrain effects roving rate
        	[(sender.myPosition.x == 0)]	rove* : 6;
        	[(sender.myPosition.x == 1)]	rove* : 4;
        	[(sender.myPosition.x == 2)]	rove* : 5;
        	//more rovers, faster sensing?
            [true]	sense* : #{ *  | sender.myPosition.x == my.myPosition.x && sender.myPosition.y == my.myPosition.y }/#{* | true};
            [true]	analyse* : 0.1;
            [true]	wait* : 3;
            [true]	signal* : 0.5;
            [true]	die* : 0.5;
            default : 0.25;
        }

        update{
            [true] send : global.reports := global.reports + 1;
            //if the Rover has over 5 data then deploy a beacon. 
            [sender.data > 5] sense* : new Beacon(sender.myPosition.x,sender.myPosition.y);
        }
    }
}








«ENDFILE»
«ENDDEFINE»