component Producer(enum a, enum b, enum c, enum d, Z){
    
    store{
        enum product := a;
        record position := {x := c, y := d};
        enum eu_sender := 1;
    }

    behaviour{
        Produce = [my.product > 0] produce*{product := product + 1}.Produce;
        Send = [my.product > 0] send<1>{product := product - 1}.Send;
    }

    init{
        Z;
    }
}

component Consumer(enum a, enum b, record p, Z){
    
    store{
        enum product := a;
        record position := p;
        enum eu_receiver := 1;
    }

    behaviour{
        Consume = [my.product > 0] consume*{product := product - 1}.Consume;
        Receive = [my.product > 0] send(z){product := product - z}.Receive;
    }

    init{
        Z;
    }
}

measures{
	measure Waiting[ enum i := 1..3, enum j := 1..3] = #{Consumer[*]  | position == {x := i, y:= j} };
}


system Simple{

    collective{
        new Producer(1,1,1,1,Produce|Send);
        new Consumer(1,1,{x := 1, y := 1},Consume|Receive);
    }

    environment{
    	
    	store{
    		enum transactions 	:= 0;
    		enum eu_global 		:= 1;
    	}
    	
        rate{
        	[True] produce* := 1;
        	[True] send 	:= 1;
        }
        
        update{
        	[True] 																			send := transactions := transactions + 1;
        	[False] 																		send := transactions := transactions + 1;
        	[sender.eu_sender == 1] 														send := transactions := transactions + 1;
        	[receiver.eu_receiver == 1] 													send := transactions := transactions + 1;
        	[global.eu_global == 1] 														send := transactions := transactions + 1;
        	[sender.eu_sender == 1 && receiver.eu_receiver == 1] 							send := transactions := transactions + 1;
        	[sender.eu_sender == 1 && receiver.eu_receiver == 1 && global.eu_global == 1] 	send := transactions := transactions + 1;
        }
    }
}